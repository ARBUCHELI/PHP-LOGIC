# LOGICAL OPERATORS AND COMPOUND CONDITIONS
-------------------------------------------

* Nested Conditional Statements
-------------------------------
In the previous lesson, we explored the foundations of making decisions in programming: booleans and conditionals. In this lesson, we’ll deepen the complexity of our programs’ 
decision-making capabilities—we’ll be able to make programs where each decision made sends our program on a different route where it might encounter additional decisions.

We wrote some code to illustrate our decision-making process when taking an elevator. Read through the code to make sense of the process:

  $is_elevator_here = true;
  $elevator_direction = "down";
  $my_direction = "up";
  $is_button_pushed = false;
 
  if ($is_elevator_here){
      if ($elevator_direction === $my_direction){
        echo "I'm in the elevator.";
      } else {
          if ($is_button_pushed){
            echo "I'm waiting...!";
          } else {
              echo "I'm pushing the button.";
          }
     }
  } else {
      if ($is_button_pushed){
          echo "I'm waiting...";
      } else {
          echo "I'm pushing the button.";
      }
   }
 
Notice that in order to implement this decision-making process with code, we nested conditionals inside each other. This is one way to make more complicated programs. In this lesson, 
we’ll also learn a new set of operators which will allow us to craft more elaborate decision-making programs. By the end, you’ll be equipped to make powerful, dynamic programs.


index.php
---------
<?php
namespace Codecademy;

function both($param1, $param2) {
  if ($param1) {
    if ($param2) {
      return "both";
    } else {
      return "not both";
    }
  } else {
      return "not both";
  }
}

echo both(TRUE,TRUE);
echo "\n";
echo both(TRUE, FALSE);
echo "\n";
echo both(FALSE, TRUE);
echo "\n";
echo both(FALSE, FALSE);

==================================================================================================================================================================

* The || Operator
-----------------
Expressions that use logical operators evaluate to boolean values.

The logical operator || takes two different boolean values or expressions as its operands and returns a single boolean value. It returns TRUE if either its left operand or its right 
operand evaluate to TRUE. We can use || in situations where more than one condition should lead to the same outcome.

TRUE || TRUE;   // Evaluates to: TRUE
 
FALSE || TRUE;  // Evaluates to: TRUE
 
TRUE || FALSE;  // Evaluates to: TRUE
 
FALSE || FALSE; // Evaluates to: FALSE
 
Let’s think about an example we might encounter in web development: when requesting a password change for a web application, the password can only be changed by either the user themselves 
or an administrator.

$is_admin = FALSE;
$is_user = TRUE;
if ($is_admin || $is_user){
  echo "You can change the password";
}
 
In the code above, the condition $is_admin || $is_user evaluates to TRUE and "You can change the password" is printed to the terminal. Note that while $is_admin is FALSE, $is_user is 
TRUE. The || operator is inclusive—it evaluates to TRUE if either or both of the operands are TRUE.

index.php
---------
<?php
namespace Codecademy;

function willWeEat($meal, $hungry) {
  if ($meal == "dessert" || $hungry) {
    return "Yum. Thanks!";
  } else {
    return "No thanks. We're not hungry.";
  }
}

echo willWeEat("dessert", TRUE);
echo "\n";
echo willWeEat("ice cream", TRUE);
echo "\n";
echo willWeEat("dessert", FALSE);
echo "\n";
echo willWeEat("ice cream", FALSE);

==================================================================================================================================================================

* The && Operator
-----------------
Often, we’ll encounter situations where we have more than one condition we need satisfied in order to take an action.

The logical && operator returns TRUE only if both of its operands evaluate to TRUE. It returns FALSE if either or both of its operands evaluate to false.

TRUE && TRUE;    // Evaluates to: TRUE
FALSE && TRUE;   // Evaluates to: FALSE
TRUE && FALSE;   // Evaluates to: FALSE
FALSE && FALSE;  // Evaluates to: FALSE
 
Let’s think about a real-world example: when attempting to withdraw money from an ATM, the account holder must both provide the correct PIN and have enough money in their account.

$correct_pin = TRUE;
$sufficient_funds = TRUE;
if ($correct_pin && $sufficient_funds){
  echo "You can make the withdrawal.";
}
 
The && operator has a higher operator precedence than the || operator. This means that in a complex statement that includes both operators, the computer will evaluate the part of the 
expression with && first:

TRUE || TRUE && FALSE // Evaluates to: TRUE
 
If we want to control the order in which the expression is evaluated, we can use parentheses for force the order:

(TRUE || TRUE) && FALSE // Evaluates to: FALSE
 
Let’s get some practice with the && operator!

index.php
---------
<?php
namespace Codecademy;

function clapYourHands($happiness, $knowledge) {
  if ($happiness && $knowledge) {
    return "CLAP!";
  }
  else {
    return ":(";
  }
}

echo clapYourHands(TRUE, TRUE);
echo "\n";
echo clapYourHands(TRUE, FALSE);
echo "\n";
echo clapYourHands(FALSE, TRUE);
echo "\n";
echo clapYourHands(FALSE, FALSE);

==================================================================================================================================================================







































